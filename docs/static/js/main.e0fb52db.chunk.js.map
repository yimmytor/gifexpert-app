{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAmCeA,EAhCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0DAC4CC,UAAUH,GADtD,sDAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCSLO,EATK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC7B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCkBDO,EAnBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACd,ECDwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAjB,GAAI,OACNe,EAAS,CACLf,OACAa,SAAS,SAGtB,CAACpB,IAEGqB,EDfyBI,CAAazB,GAAhCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACI,qCACI,6BAAKpB,IAEJoB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAiB,GAAK,OACZ,cAAC,EAAD,eAAgCA,GAAdA,EAAMf,aEajCgB,EAvBM,WACjB,MAAoCzC,mBAAS,IAA7C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQS,EAAWe,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,YCZjC4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e0fb52db.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {        \r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2)\r\n        {\r\n            setCategories(categories => [inputValue,...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}                                \r\n                onChange={handleInputChange}\r\n            />            \r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n \r\nexport default AddCategory;","export const getGifs = async (category) => {        \r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=sSiM4PpRX46NjM1876OWo0chKfPkSCd5`;\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default GifGridItem;","import { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return ( \r\n        <>\r\n            <h3>{category}</h3>            \r\n\r\n            {loading && <p>Cargando...</p>} \r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(image =>\r\n                        <GifGridItem key={image.id} {...image} />\r\n                    )                \r\n                }             \r\n            </div>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default GifGrid;","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)  \r\n            .then(data =>\r\n                setState({\r\n                    data,\r\n                    loading: false\r\n                }\r\n            ));\r\n    }, [category]);\r\n\r\n    return state;\r\n} ","import { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>            \r\n\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />              \r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category =>\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}/>\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}